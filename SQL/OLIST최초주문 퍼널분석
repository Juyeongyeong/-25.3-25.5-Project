#기본 전제가 이탈률이 많은 데이터이다. 그렇다면 부정적인 요인은 무었인가?
-- Step 1: 고객당 최초 주문 ID 구하기
CREATE TABLE first_order AS
WITH first_orders AS (
  SELECT 
    c.customer_unique_id,
    MIN(o.order_purchase_timestamp) AS first_order_date
  FROM customers c
  JOIN orders o ON c.customer_id = o.customer_id
  GROUP BY c.customer_unique_id
),
first_order_ids AS (
  SELECT 
    c.customer_unique_id,
    MIN(o.order_id) AS first_order_id
  FROM customers c
  JOIN orders o ON c.customer_id = o.customer_id
  JOIN first_orders f ON c.customer_unique_id = f.customer_unique_id
                     AND o.order_purchase_timestamp = f.first_order_date
  GROUP BY c.customer_unique_id
),
-- Step 2: 주문별 총 결제 금액 집계
payment_sums AS (
  SELECT 
    order_id,
    SUM(payment_value) AS total_payment_value
  FROM order_payment
  GROUP BY order_id
)

-- Step 3: 결제 합계와 리뷰 정보를 결합
SELECT 
  f.customer_unique_id,
  f.first_order_id,
  o.order_purchase_timestamp AS first_order_date,
  p.total_payment_value,
  r.review_score,
  r.review_comment_title,
  r.review_comment_message
FROM first_order_ids f
JOIN orders o ON f.first_order_id = o.order_id
LEFT JOIN payment_sums p ON o.order_id = p.order_id
LEFT JOIN order_reviews r ON o.order_id = r.order_id;

SELECT count(*) FROM first_order;

SELECT customer_unique_id, COUNT(DISTINCT order_id) AS order_count
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY customer_unique_id
HAVING order_count > 1
ORDER BY order_count DESC;

-- 주문일 같아도 order_id 가장 작은 것만 선택
#CREATE TABLE first_order_final AS
WITH first_order_final AS(
SELECT 
    distinct(customer_unique_id),

    MIN(order_id) AS first_order_id,
    MIN(order_purchase_timestamp) AS first_order_date
FROM (
  SELECT 
    c.customer_unique_id,
    o.order_id,
    o.order_purchase_timestamp
  FROM customers c
  JOIN orders o ON c.customer_id = o.customer_id
) sub
GROUP BY customer_unique_id
)
SELECT * FROM first_order_final;

WITH base AS (
  SELECT
    fo.customer_unique_id,
    fo.first_order_id,
    o.order_status,
    o.order_delivered_customer_date,
    p.total_payment_value
  FROM first_order_final fo
  JOIN orders o ON fo.first_order_id = o.order_id
  LEFT JOIN (
    SELECT order_id, SUM(payment_value) AS total_payment_value
    FROM order_payment
    GROUP BY order_id
  ) p ON o.order_id = p.order_id
)

SELECT
  (SELECT COUNT(DISTINCT customer_unique_id) FROM customers) AS total_customers,
  COUNT(DISTINCT base.customer_unique_id) AS customers_with_orders,
  COUNT(DISTINCT CASE WHEN base.total_payment_value IS NOT NULL THEN base.customer_unique_id END) AS customers_with_payment,
  COUNT(DISTINCT CASE WHEN base.order_delivered_customer_date IS NOT NULL THEN base.customer_unique_id END) AS customers_with_delivery
FROM base;
