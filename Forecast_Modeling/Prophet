#prophet에서 반드시 있어야할 칼럼 ds : (datetime 형식) / Y: 예측하고자 하는 값 
import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt 
from matplotlib import rcParams

rcParams['font.family'] = 'AppleGothic'

df = pd.read_csv('Personal_Finance_Dataset.csv', encoding = 'utf-8-sig')
df['date'] = pd.to_datetime(df['Date'])

expense = df[df['Type'] == 'Expense'].copy()
print(expense.info())
expense['month'] = expense['date'].dt.to_period('M')

monthly = expense.groupby('month')['Amount'].sum().reset_index()


#Prophet 포맷으로 컬럼 이름 변경 / monthly['month']는 period 형식-> prophet에서 인식 불가
monthly['ds'] = monthly['month'].dt.to_timestamp()
monthly['y'] = monthly['Amount']
prophet_df = monthly[['ds','y']]

model = Prophet()
model.fit(prophet_df)

#미래 날짜 생성(1개월)
future = model.make_future_dataframe(periods = 1, freq = 'M')

#예측 수행
forecast = model.predict(future)

#예측값 추출
next_month_forecast = forecast[['ds', 'yhat']].tail(1)
predicted_value = int(next_month_forecast['yhat'].values[0])

#예산 기준
budget = 20000

print(f"예측된 다음 달 지출액: {predicted_value:,}원")
if predicted_value > budget:
    print("예산을 초과할 것으로 예상됩니.")
else:
    print("예산 범위 내 예산됩니다.")
    

# 시각화
fig = model.plot(forecast)
plt.axhline(y=budget, color='red', linestyle='--', label='예산 한도')
plt.legend()
plt.title("Prophet 기반 월별 지출 예측")
plt.tight_layout()
plt.show()

#prophet 예측 결과와 실제값 비 
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

#실제값 : prophet_df['y']
#예측값 : forecast에 과거 데이터만 선택 
forecast_actual = forecast[forecast['ds'] <= prophet_df['ds'].max()]
y_true = prophet_df['y'].values
y_pred = forecast_actual['yhat'].values

#MAPE, RMSE 계산
# MAPE 함수 정의
def mean_absolute_percentage_error(y_true, y_pred):
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

# MAE, RMSE, MAPE 계산
mae = mean_absolute_error(y_true, y_pred)
rmse = np.sqrt(mean_squared_error(y_true, y_pred))
mape = mean_absolute_percentage_error(y_true, y_pred)

print(f"📊 MAE: {mae:,.0f}원") #평균적으로 얼마 차이 나는지(단위 그대로)
print(f"📉 RMSE: {rmse:,.0f}원") #큰 오차 더 민감하 반응
print(f"📈 MAPE: {mape:.2f}%") #%로 표현되어 해석이 쉬움 (5% 이하면 매우 우수)
#MAPE 0~10% = 매우 우수, ~20% = 보통, ~50% = 부정확, 그 이상 = 거의 쓸 수 없음

📊 MAE: 3,691원
📉 RMSE: 4,433원
📈 MAPE: 19.39%
